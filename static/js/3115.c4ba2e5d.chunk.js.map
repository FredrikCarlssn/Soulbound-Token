{"version":3,"file":"static/js/3115.c4ba2e5d.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/contract-sales-64493c3f.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/account-factory-4944f144.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/smart-contract-9547a4a2.browser.esm.js"],"sourcesContent":["import { c as buildTransactionFunction, T as Transaction } from './transactions-12414a24.browser.esm.js';\nimport { d6 as FEATURE_PRIMARY_SALE } from './index-924d29a2.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns the wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { bn as AbiSchema, a4 as extractCommentFromMetadata, K as fetchContractMetadataFromAddress, as as fetchSourceFilesFromMetadata, a6 as extractFunctionsFromAbi, cz as AmountSchema, bd as AddressOrEnsSchema, dp as FEATURE_ACCOUNT_PERMISSIONS, cx as AddressZero, aP as resolveAddress, dq as FEATURE_ACCOUNT, dr as FEATURE_ACCOUNT_FACTORY, az as isContractDeployed } from './index-924d29a2.browser.esm.js';\nimport { T as Transaction, c as buildTransactionFunction } from './transactions-12414a24.browser.esm.js';\nimport { BigNumber, utils } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { d as detectContractFeature, a as ContractEvents } from './contract-appuri-7ca2192f.browser.esm.js';\nimport { I as resolveOrGenerateId } from './signature-2b4b7703.browser.esm.js';\nimport { z } from 'zod';\nimport { S as StartDateSchema, E as EndDateSchema, a as assertEnabled } from './assertEnabled-c7de2a13.browser.esm.js';\n\n/**\n * @internal\n * @param abi - The abi to extract events from\n * @param metadata - The metadata to extract comments from\n */\nfunction extractEventsFromAbi(abi, metadata) {\n  const parsedAbi = AbiSchema.parse(abi || []);\n  const events = parsedAbi.filter(el => el.type === \"event\");\n  const parsed = [];\n  for (const e of events) {\n    const doc = extractCommentFromMetadata(e.name, metadata, \"events\");\n    parsed.push({\n      inputs: e.inputs || [],\n      outputs: e.outputs || [],\n      name: e.name || \"unknown\",\n      comment: doc\n    });\n  }\n  return parsed;\n}\n\n/**\n * Handles publish metadata for a contract\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractPublishedMetadata {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get the published metadata for this contract\n   * @public\n   */\n  async get() {\n    if (this._cachedMetadata) {\n      return this._cachedMetadata;\n    }\n    this._cachedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n    return this._cachedMetadata;\n  }\n\n  /**\n   * @public\n   */\n  async extractSources() {\n    const publishedMetadata = await this.get();\n    return fetchSourceFilesFromMetadata(publishedMetadata, this.storage);\n  }\n\n  /**\n   * @public\n   */\n  async extractFunctions() {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractFunctionsFromAbi(AbiSchema.parse(this.contractWrapper.abi), publishedMetadata?.metadata);\n  }\n\n  /**\n   * @public\n   */\n  async extractEvents() {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractEventsFromAbi(AbiSchema.parse(this.contractWrapper.abi), publishedMetadata?.metadata);\n  }\n}\n\nlet AdminFlag = /*#__PURE__*/function (AdminFlag) {\n  AdminFlag[AdminFlag[\"None\"] = 0] = \"None\";\n  AdminFlag[AdminFlag[\"AddAdmin\"] = 1] = \"AddAdmin\";\n  AdminFlag[AdminFlag[\"RemoveAdmin\"] = 2] = \"RemoveAdmin\";\n  return AdminFlag;\n}({});\nconst DEFAULT_PERMISSIONS = {\n  // eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\n  startDate: BigNumber.from(0),\n  // eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\n  expirationDate: BigNumber.from(0),\n  approvedCallTargets: [],\n  nativeTokenLimitPerTransaction: \"0\"\n};\nconst SignerPermissionsSchema = /* @__PURE__ */(() => z.object({\n  startDate: StartDateSchema,\n  expirationDate: EndDateSchema,\n  nativeTokenLimitPerTransaction: AmountSchema.default(0),\n  approvedCallTargets: z.union([z.array(AddressOrEnsSchema), z.literal(\"*\")])\n}))();\nconst PermissionSnapshotSchema = /* @__PURE__ */(() => z.array(z.object({\n  signer: AddressOrEnsSchema,\n  makeAdmin: z.boolean(),\n  permissions: SignerPermissionsSchema\n})))();\nconst SignerPermissionRequestV1 = [{\n  name: \"signer\",\n  type: \"address\"\n}, {\n  name: \"approvedTargets\",\n  type: \"address[]\"\n}, {\n  name: \"nativeTokenLimitPerTransaction\",\n  type: \"uint256\"\n}, {\n  name: \"permissionStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"permissionEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst SignerPermissionRequest = [{\n  name: \"signer\",\n  type: \"address\"\n}, {\n  name: \"isAdmin\",\n  type: \"uint8\"\n}, {\n  name: \"approvedTargets\",\n  type: \"address[]\"\n}, {\n  name: \"nativeTokenLimitPerTransaction\",\n  type: \"uint256\"\n}, {\n  name: \"permissionStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"permissionEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\n\nclass AccountPermissions {\n  featureName = FEATURE_ACCOUNT_PERMISSIONS.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * HELPER FUNCTIONS\n   ********************************/\n\n  hasDuplicateSigners(snapshot) {\n    const checkedSigner = {};\n    const signers = snapshot.map(item => item.signer);\n    for (const signer of signers) {\n      if (!checkedSigner[signer]) {\n        checkedSigner[signer] = true;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Format the access restrictions for a given role\n   *\n   * @param restrictions - The access restrictions for a given role\n   * @returns formatted role restrictions\n   *\n   */\n  parseSignerPermissionsStruct(permissions) {\n    return {\n      startDate: new Date(parseInt(permissions.startTimestamp.toString()) * 1000),\n      expirationDate: new Date(parseInt(permissions.endTimestamp.toString()) * 1000),\n      nativeTokenLimitPerTransaction: BigNumber.from(permissions.nativeTokenLimitPerTransaction),\n      approvedCallTargets: permissions.approvedTargets\n    };\n  }\n  async sendSignerPermissionRequest(signerAddress, permissions, adminFlag) {\n    if (detectContractFeature(this.contractWrapper, \"AccountPermissionsV1\")) {\n      // legacy account permissions contract\n      // admin is set only via EOA\n      // signer permissions are set via EOA or admin but no wildcard\n      if (adminFlag === AdminFlag.AddAdmin || adminFlag === AdminFlag.RemoveAdmin) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"setAdmin\",\n          args: [signerAddress, adminFlag === AdminFlag.AddAdmin]\n        });\n      } else {\n        const {\n          payload,\n          signature\n        } = await this.generateLegacyPayload(signerAddress, permissions);\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"setPermissionsForSigner\",\n          args: [payload, signature]\n        });\n      }\n    }\n    const {\n      payload,\n      signature\n    } = await this.generatePayload(signerAddress, permissions, adminFlag);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPermissionsForSigner\",\n      args: [payload, signature]\n    });\n  }\n\n  /**\n   * Generate and sign a payload to grant or revoke a signer's access to the account.\n   *\n   * @param signer - The address of the signer\n   * @param roleAction - The address of the signer\n   * @returns The generated payload and signature produced on signing that payload.\n   *\n   */\n  async generatePayload(signerAddress, permissions, isAdmin) {\n    // Get payload struct.\n    const payload = {\n      signer: signerAddress,\n      isAdmin: isAdmin.valueOf(),\n      approvedTargets: permissions.approvedCallTargets === \"*\" ? [AddressZero] : permissions.approvedCallTargets,\n      nativeTokenLimitPerTransaction: utils.parseEther(permissions.nativeTokenLimitPerTransaction),\n      permissionStartTimestamp: permissions.startDate,\n      permissionEndTimestamp: permissions.expirationDate,\n      reqValidityStartTimestamp: 0,\n      // Req validity ends 10 years from now.\n      reqValidityEndTimestamp: BigNumber.from(Math.floor(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).getTime() / 1000)),\n      uid: resolveOrGenerateId(undefined)\n    };\n\n    // Generate signature\n    const chainId = await this.contractWrapper.getChainID();\n    const connectedSigner = this.contractWrapper.getSigner();\n    invariant(connectedSigner, \"No signer available\");\n    const signature = await this.contractWrapper.signTypedData(connectedSigner, {\n      name: \"Account\",\n      version: \"1\",\n      chainId,\n      verifyingContract: this.getAddress()\n    }, {\n      SignerPermissionRequest\n    }, payload);\n    return {\n      payload,\n      signature\n    };\n  }\n  async generateLegacyPayload(signerAddress, permissions) {\n    if (permissions.approvedCallTargets === \"*\") {\n      throw new Error(\"Wildcard call targets are not supported on legacy account permissions contract, please deploy an updated contract factory.\");\n    }\n    // legacy account permissions contract\n    // admin is set only via EOA\n    // signer permissions are set via EOA or admin but no wildcard\n    const payload = {\n      signer: signerAddress,\n      approvedTargets: permissions.approvedCallTargets,\n      nativeTokenLimitPerTransaction: utils.parseEther(permissions.nativeTokenLimitPerTransaction),\n      permissionStartTimestamp: permissions.startDate,\n      permissionEndTimestamp: permissions.expirationDate,\n      reqValidityStartTimestamp: 0,\n      // Req validity ends 10 years from now.\n      reqValidityEndTimestamp: BigNumber.from(Math.floor(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).getTime() / 1000)),\n      uid: resolveOrGenerateId(undefined)\n    };\n    const chainId = await this.contractWrapper.getChainID();\n    const connectedSigner = this.contractWrapper.getSigner();\n    invariant(connectedSigner, \"No signer available\");\n    const signature = await this.contractWrapper.signTypedData(connectedSigner, {\n      name: \"Account\",\n      version: \"1\",\n      chainId,\n      verifyingContract: this.getAddress()\n    }, {\n      SignerPermissionRequest: SignerPermissionRequestV1\n    }, payload);\n    return {\n      payload,\n      signature\n    };\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   ********************************/\n\n  /**\n   * Get whether a signer is an admin on the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isAdmin(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer is an admin on the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isAdmin(signerAddress) {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.contractWrapper.read(\"isAdmin\", [resolvedSignerAddress]);\n  }\n\n  /**\n   * Get whether a signer has permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isSigner(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer has permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isSigner(signerAddress) {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.contractWrapper.read(\"isActiveSigner\", [resolvedSignerAddress]);\n  }\n\n  /**\n   * Get all admins of the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdmins = await contract.account.getAllAdmins();\n   * ```\n   *\n   * @returns all admins of the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdmins() {\n    return await this.contractWrapper.read(\"getAllAdmins\", []);\n  }\n\n  /**\n   * Get all (non-admin) signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allSigners = await contract.account.getAllSigners();\n   * ```\n   *\n   * @returns all (non-admin) signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllSigners() {\n    const activeSignersWithPerms = await this.contractWrapper.read(\"getAllActiveSigners\", []);\n    return await Promise.all(activeSignersWithPerms.map(async signerWithPermissions => {\n      const signer = signerWithPermissions.signer;\n      const permissions = this.parseSignerPermissionsStruct(signerWithPermissions);\n      return {\n        signer,\n        permissions\n      };\n    }));\n  }\n\n  /**\n   * Get all admins and non-admin signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();\n   * ```\n   *\n   * @returns all admins and non-admin signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdminsAndSigners() {\n    const allAdmins = await this.getAllAdmins();\n    const transformedAdmins = allAdmins.map(admin => {\n      return {\n        isAdmin: true,\n        signer: admin,\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      };\n    });\n    const allSigners = await this.getAllSigners();\n    return [...transformedAdmins, ...allSigners];\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   ********************************/\n\n  /**\n   * Grant an address admin access to the account.\n   *\n   * @remarks Grants an address admin access to the account. The admin will have complete authority over the account.\n   *\n   * @param signer - The address to be granted admin access to the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, DEFAULT_PERMISSIONS, AdminFlag.AddAdmin);\n  });\n\n  /**\n   * Revoke an address' admin access to the account.\n   *\n   * @remarks Revokes an address' admin access to the account.\n   *\n   * @param signer - The address of an admin of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, DEFAULT_PERMISSIONS, AdminFlag.RemoveAdmin);\n  });\n\n  /**\n   * Grant a signer permissions to use the account.\n   *\n   * @remarks Grants a signer permissions to use the account.\n   *\n   * @param signer - The signer to be granted permissions to use the account.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantPermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantPermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedPermissions = await SignerPermissionsSchema.parseAsync(permissions);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot grant permissions to an existing admin.\");\n    }\n    if (await this.isSigner(resolvedSignerAddress)) {\n      throw new Error(\"Signer already has permissions. Cannot grant permissions to an existing signer. You can update permissions using `updatePermissions`.\");\n    }\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, resolvedPermissions, AdminFlag.None);\n  });\n\n  /**\n   * Update the permissions of a signer for using the account.\n   *\n   * @remarks Updates the permissions of a signer for using the account.\n   *\n   * @param signer - The signer whose permissions to use the account are to be updated.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.updatePermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  updatePermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedPermissions = await SignerPermissionsSchema.parseAsync(permissions);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot update permissions of an existing admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, resolvedPermissions, AdminFlag.None);\n  });\n\n  /**\n   * Revoke a scoped access address to the account\n   *\n   * @remarks Revokes an address' access to the account.\n   *\n   * @param signer - The address whose access to the account is to be revoked.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAccess = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot revoke permissions of an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(0),\n      expirationDate: BigNumber.from(0),\n      approvedCallTargets: [],\n      nativeTokenLimitPerTransaction: \"0\"\n    }, AdminFlag.None);\n  });\n\n  /**\n   * Approve an address as a call target for a given signer on the account\n   *\n   * @remarks Approves an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to approve as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.approveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  approveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedTarget = await resolveAddress(target);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot approve targets for an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    const permissions = await this.contractWrapper.read(\"getPermissionsForSigner\", [resolvedSignerAddress]);\n    if (permissions.approvedTargets.includes(target)) {\n      throw new Error(\"Target is already approved\");\n    }\n    const newTargets = [...permissions.approvedTargets, resolvedTarget];\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(permissions.startTimestamp),\n      expirationDate: BigNumber.from(permissions.endTimestamp),\n      approvedCallTargets: newTargets,\n      nativeTokenLimitPerTransaction: permissions.nativeTokenLimitPerTransaction.toString()\n    }, AdminFlag.None);\n  });\n\n  /**\n   * Disapprove an address as a call target for a given signer on the account\n   *\n   * @remarks Disapprove an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to disapprove as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.disapproveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  disapproveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedTarget = await resolveAddress(target);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot approve targets for an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    const permissions = await this.contractWrapper.read(\"getPermissionsForSigner\", [resolvedSignerAddress]);\n    if (!permissions.approvedTargets.includes(resolvedTarget)) {\n      throw new Error(\"Target is currently not approved\");\n    }\n    const newTargets = permissions.approvedTargets.filter(approvedTarget => utils.getAddress(approvedTarget) !== utils.getAddress(resolvedTarget));\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(permissions.startTimestamp),\n      expirationDate: BigNumber.from(permissions.endTimestamp),\n      approvedCallTargets: newTargets,\n      nativeTokenLimitPerTransaction: permissions.nativeTokenLimitPerTransaction.toString()\n    }, AdminFlag.None);\n  });\n\n  /**\n   * Set the account's entire snapshot of permissions.\n   *\n   * @remarks Sets the account's entire snapshot of permissions.\n   *\n   * @param permissionSnapshot - the snapshot to set as the account's entire permission snapshot.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.setAccess(permissionSnapshot);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  resetAllPermissions = /* @__PURE__ */buildTransactionFunction(async permissionSnapshot => {\n    const resolvedSnapshot = await PermissionSnapshotSchema.parseAsync(permissionSnapshot);\n\n    /**\n     * All cases\n     *\n     * - Add new admin :check:\n     * - Remove current admin :check:\n     * - Add new scoped :check:\n     * - Remove current scoped :check:\n     * - Update current scoped :check:\n     * - Current admin - new scoped :check:\n     * - Current scoped - new admin :check:\n     **/\n\n    // No duplicate signers in input!\n    if (this.hasDuplicateSigners(resolvedSnapshot)) {\n      throw new Error(\"Duplicate signers found in input.\");\n    }\n    const removeAdminData = [];\n    const addOrUpdateSignerData = [];\n    const removeSignerData = [];\n\n    // Remove all existing admins not included in the passed snapshot.\n    const allAdmins = await this.getAllAdmins();\n    const allToMakeAdmin = resolvedSnapshot.filter(item => item.makeAdmin).map(item => item.signer);\n    allAdmins.forEach(async admin => {\n      if (!allToMakeAdmin.includes(admin)) {\n        const data = (await this.sendSignerPermissionRequest(admin, DEFAULT_PERMISSIONS, AdminFlag.RemoveAdmin)).encode();\n        removeAdminData.push(data);\n      }\n    });\n\n    // Remove all existing signers not included in the passed snapshot.\n    const allSigners = await this.getAllSigners();\n    const allToMakeSigners = resolvedSnapshot.filter(item => {\n      return !item.makeAdmin;\n    }).map(item => item.signer);\n    await Promise.all(allSigners.map(async item => {\n      if (!allToMakeSigners.includes(item.signer)) {\n        const data = (await this.sendSignerPermissionRequest(item.signer, DEFAULT_PERMISSIONS, AdminFlag.None)).encode();\n        removeSignerData.push(data);\n      }\n    }));\n    for (const member of resolvedSnapshot) {\n      // Add new admin\n      if (member.makeAdmin) {\n        (await this.sendSignerPermissionRequest(member.signer, DEFAULT_PERMISSIONS, AdminFlag.AddAdmin)).encode();\n      } else {\n        // Add new scoped\n        const data = (await this.sendSignerPermissionRequest(member.signer, member.permissions, AdminFlag.None)).encode();\n        addOrUpdateSignerData.push(data);\n      }\n    }\n    const data = [];\n    removeAdminData.forEach(item => {\n      data.push(item);\n    });\n    removeSignerData.forEach(item => {\n      data.push(item);\n    });\n    addOrUpdateSignerData.forEach(item => {\n      data.push(item);\n    });\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data]\n    });\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass Account {\n  featureName = FEATURE_ACCOUNT.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n    this.accountPermissions = this.detectAccountPermissions();\n  }\n  detectAccountPermissions() {\n    if (detectContractFeature(this.contractWrapper, \"AccountPermissions\") || detectContractFeature(this.contractWrapper, \"AccountPermissionsV1\")) {\n      return new AccountPermissions(this.contractWrapper);\n    }\n    return undefined;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   ********************************/\n\n  /**\n   * Get whether a signer is an admin on the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isAdmin(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer is an admin on the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isAdmin(signerAddress) {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).isAdmin(signerAddress);\n  }\n\n  /**\n   * Get whether a signer has permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isSigner(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer has permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isSigner(signerAddress) {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).isSigner(signerAddress);\n  }\n\n  /**\n   * Get all admins of the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdmins = await contract.account.getAllAdmins();\n   * ```\n   *\n   * @returns all admins of the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdmins() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllAdmins();\n  }\n\n  /**\n   * Get all (non-admin) signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allSigners = await contract.account.getAllSigners();\n   * ```\n   *\n   * @returns all (non-admin) signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllSigners() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllSigners();\n  }\n\n  /**\n   * Get all admins and non-admin signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();\n   * ```\n   *\n   * @returns all admins and non-admin signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdminsAndSigners() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllAdminsAndSigners();\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   ********************************/\n\n  /**\n   * Grant an address admin access to the account.\n   *\n   * @remarks Grants an address admin access to the account. The admin will have complete authority over the account.\n   *\n   * @param signer - The address to be granted admin access to the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).grantAdminPermissions.prepare(signerAddress);\n  });\n\n  /**\n   * Revoke an address' admin access to the account.\n   *\n   * @remarks Revokes an address' admin access to the account.\n   *\n   * @param signer - The address of an admin of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).revokeAdminPermissions.prepare(signerAddress);\n  });\n\n  /**\n   * Grant a signer permissions to use the account.\n   *\n   * @remarks Grants a signer permissions to use the account.\n   *\n   * @param signer - The signer to be granted permissions to use the account.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantPermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantPermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).grantPermissions.prepare(signerAddress, permissions);\n  });\n\n  /**\n   * Update the permissions of a signer for using the account.\n   *\n   * @remarks Updates the permissions of a signer for using the account.\n   *\n   * @param signer - The signer whose permissions to use the account are to be updated.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.updateAccess(signer, restrictions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  updatePermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).updatePermissions.prepare(signerAddress, permissions);\n  });\n\n  /**\n   * Revoke a scoped access address to the account\n   *\n   * @remarks Revokes an address' access to the account.\n   *\n   * @param signer - The address whose access to the account is to be revoked.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAccess = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).revokeAccess.prepare(signerAddress);\n  });\n\n  /**\n   * Approve an address as a call target for a given signer on the account\n   *\n   * @remarks Approves an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to approve as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.approveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  approveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).approveTargetForSigner.prepare(signerAddress, target);\n  });\n\n  /**\n   * Disapprove an address as a call target for a given signer on the account\n   *\n   * @remarks Disapprove an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to disapprove as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.disapproveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  disapproveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).disapproveTargetForSigner.prepare(signerAddress, target);\n  });\n\n  /**\n   * Set the account's entire snapshot of permissions.\n   *\n   * @remarks Sets the account's entire snapshot of permissions.\n   *\n   * @param permissionSnapshot - the snapshot to set as the account's entire permission snapshot.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.setAccess(permissionSnapshot);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  resetAllPermissions = /* @__PURE__ */buildTransactionFunction(async permissionSnapshot => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).resetAllPermissions.prepare(permissionSnapshot);\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass AccountFactory {\n  featureName = FEATURE_ACCOUNT_FACTORY.name;\n\n  // utilities\n\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the deterministic address of the account that will be created\n   *\n   * @example\n   * ```javascript\n   * const accountAddress = await contract.accountFactory.predictAccountAddress(admin);\n   * ```\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   * @returns the deterministic address of the account that will be created for the given admin.\n   *\n   * @twfeature AccountFactory\n   */\n  async predictAccountAddress(admin, extraData) {\n    let data = utils.toUtf8Bytes(\"\");\n    if (extraData) {\n      data = extraData;\n    }\n    return this.contractWrapper.read(\"getAddress\", [admin, data]);\n  }\n\n  /**\n   * Get all accounts on which the given signer has authority\n   *\n   * @example\n   * ```javascript\n   * const allAccounts = await contract.accountFactory.getAssociatedAccounts(admin);\n   * ```\n   * @param signer - The account address.\n   * @returns all accounts on which the given signer has authority.\n   *\n   * @twfeature AccountFactory\n   */\n  async getAssociatedAccounts(signer) {\n    return this.contractWrapper.read(\"getAccountsOfSigner\", [signer]);\n  }\n\n  /**\n   * Get all accounts\n   *\n   * @example\n   * ```javascript\n   * const allAccounts = await contract.accountFactory.getAllAccounts();\n   * ```\n   *\n   * @returns all accounts created via the account factory.\n   *\n   * @twfeature AccountFactory\n   */\n  async getAllAccounts() {\n    return await this.contractWrapper.read(\"getAllAccounts\", []);\n  }\n\n  /**\n   * Check if a account has been deployed for the given admin\n   *\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   * @returns whether the account has been deployed for the given admin.\n   */\n  async isAccountDeployed(admin, extraData) {\n    const addr = await this.predictAccountAddress(admin, extraData);\n    return isContractDeployed(addr, this.contractWrapper.getProvider());\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a account\n   *\n   * @remarks Create a account for an admin. The admin will have complete authority over the account.\n   *\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.accountFactory.createAccount(admin, extraData);\n   * const receipt = tx.receipt();\n   * const accountAddress = tx.address;\n   * ```\n   *\n   * @twfeature AccountFactory\n   */\n  createAccount = /* @__PURE__ */buildTransactionFunction(async (accountAdmin, extraData) => {\n    if (await this.isAccountDeployed(accountAdmin, extraData)) {\n      throw new Error(`Account already deployed for admin: ${accountAdmin}`);\n    }\n    let data = utils.toUtf8Bytes(\"\");\n    if (extraData) {\n      data = extraData;\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createAccount\",\n      args: [accountAdmin, data],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"AccountCreated\", receipt?.logs);\n        return {\n          address: event[0].args.account,\n          receipt\n        };\n      }\n    });\n  });\n}\n\nexport { Account as A, ContractPublishedMetadata as C, DEFAULT_PERMISSIONS as D, PermissionSnapshotSchema as P, SignerPermissionsSchema as S, AccountFactory as a, AdminFlag as b, SignerPermissionRequestV1 as c, SignerPermissionRequest as d, extractEventsFromAbi as e };\n","import { a as assertEnabled } from './assertEnabled-c7de2a13.browser.esm.js';\nimport { a as ContractEvents, G as GasCostEstimator, C as ContractMetadata, d as detectContractFeature, b as ContractAppURI } from './contract-appuri-7ca2192f.browser.esm.js';\nimport { dI as FEATURE_AIRDROP_ERC1155, dJ as FEATURE_AIRDROP_ERC20, dK as FEATURE_AIRDROP_ERC721, dL as FEATURE_DYNAMIC_CONTRACT, bn as AbiSchema, K as fetchContractMetadataFromAddress, an as joinABIs, bF as CommonContractSchema, aL as THIRDWEB_DEPLOYER, aM as fetchPublishedContractFromPolygon, d4 as FEATURE_ROYALTY, d3 as FEATURE_PERMISSIONS, d6 as FEATURE_PRIMARY_SALE, dn as FEATURE_PLATFORM_FEE, d5 as FEATURE_OWNER, cL as FEATURE_TOKEN, d0 as FEATURE_NFT, di as FEATURE_EDITION, d2 as FEATURE_APPURI, dk as FEATURE_DIRECT_LISTINGS, dl as FEATURE_ENGLISH_AUCTIONS, dm as FEATURE_OFFERS, dr as FEATURE_ACCOUNT_FACTORY, dq as FEATURE_ACCOUNT, cu as ContractWrapper, bk as CustomContractSchema, G as ALL_ROLES } from './index-924d29a2.browser.esm.js';\nimport { C as ContractPublishedMetadata, a as AccountFactory, A as Account } from './account-factory-4944f144.browser.esm.js';\nimport { c as buildTransactionFunction, T as Transaction } from './transactions-12414a24.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-7b372272.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-6f8989ff.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-fef93be6.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-1466f0e8.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-bd76ee50.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-64493c3f.browser.esm.js';\nimport { e as Erc1155 } from './erc-1155-5c9a7cce.browser.esm.js';\nimport { f as Erc20 } from './erc-20-2cdfacfb.browser.esm.js';\nimport { h as Erc721 } from './erc-721-3e2f7b8b.browser.esm.js';\nimport { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers } from './marketplacev3-offers-c9ada912.browser.esm.js';\nimport { b as generateExtensionFunctions, g as getDeploymentInfo, a as deployWithThrowawayDeployer, d as deployContractDeterministic } from './deployWithThrowawayDeployer-e83ef1d9.browser.esm.js';\nimport { utils } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './signature-2b4b7703.browser.esm.js';\nimport './normalizePriceValue-b8097c8f.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './setErc20Allowance-5cdb760b.browser.esm.js';\nimport 'uuid';\nimport './QueryParams-86b5bbc0.browser.esm.js';\nimport 'fast-deep-equal';\nimport './drop-claim-conditions-33b4da26.browser.esm.js';\nimport './cleanCurrencyAddress-6380caa4.browser.esm.js';\nimport './marketplace-5fd92910.browser.esm.js';\n\n/**\n * @public\n */\nclass Airdrop1155 {\n  featureName = FEATURE_AIRDROP_ERC1155.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Perform airdrop of ERC1155 tokens\n   *\n   * @example\n   * ```javascript\n   * // Airdrop content array, with recipients and tokenIds\n   * const contents = [\n   *      {\n   *        recipient: \"0xabc...\", // first recipient address\n   *        tokenId: 0,\n   *        amount: \"10\" // number of tokens\n   *      },\n   *      {\n   *        recipient: \"0x123...\", // second recipient address\n   *        tokenId: 0\n   *        amount: \"20\" // number of tokens\n   *      }\n   *   ]\n   *\n   * const tokenAddress = \"0x...\" // Address of the ERC1155 token being airdropped\n   * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n   *\n   * const output = await contract.airdrop1155.drop(tokenAddress, tokenOwner, contents);\n   *\n   * // the `output` return value above contains:\n   * //     - count of successful and failed drops\n   * //     - array containing failed drops, if any\n   *\n   * ```\n   * @param tokenAddress - Address of the ERC1155 token being airdropped\n   * @param tokenOwner - Address of the owner of the tokens being airdropped\n   * @param contents - Array of recipients and tokenIds to airdrop\n   *\n   * @returns an array of recipients for who the airdrop failed (empty means all transfers were successful)\n   * @twfeature AirdropERC1155\n   */\n  drop = /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"airdropERC1155\",\n      args: [tokenAddress, tokenOwner, contents],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n        const failedDrops = events.map(e => {\n          return {\n            recipient: e.args.recipient,\n            tokenId: e.args.tokenId.toNumber(),\n            amount: e.args.amount.toString()\n          };\n        });\n        return {\n          successfulDropCount: contents.length - failedDrops.length,\n          failedDropCount: failedDrops.length,\n          failedDrops\n        };\n      }\n    });\n  });\n}\n\n/**\n * @public\n */\nclass Airdrop20 {\n  featureName = FEATURE_AIRDROP_ERC20.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Perform airdrop of ERC20 tokens\n   *\n   * @example\n   * ```javascript\n   * // Airdrop content array, with recipients and token amounts\n   * const contents = [\n   *      {\n   *        recipient: \"0xabc...\", // first recipient address\n   *        amount: \"10\" // number of tokens in wei units\n   *      },\n   *      {\n   *        recipient: \"0x123...\", // second recipient address\n   *        amount: \"20\" // number of tokens in wei units\n   *      }\n   *   ]\n   *\n   * const tokenAddress = \"0x...\" // Address of the ERC20 token being airdropped\n   * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n   *\n   * const output = await contract.airdrop20.drop(tokenAddress, tokenOwner, contents);\n   *\n   * // the `output` return value above contains:\n   * //     - count of successful and failed drops\n   * //     - array containing failed drops, if any\n   *\n   * ```\n   * @param tokenAddress - Address of the ERC20 token being airdropped\n   * @param tokenOwner - Address of the owner of the tokens being airdropped\n   * @param contents - Array of airdrop contents\n   *\n   * @returns an array of recipients for who the airdrop failed (empty means all transfers were successful)\n   * @twfeature AirdropERC20\n   */\n  drop = /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"airdropERC20\",\n      args: [tokenAddress, tokenOwner, contents],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n        const failedDrops = events.map(e => {\n          return {\n            recipient: e.args.recipient,\n            amount: e.args.amount.toString()\n          };\n        });\n        return {\n          successfulDropCount: contents.length - failedDrops.length,\n          failedDropCount: failedDrops.length,\n          failedDrops\n        };\n      }\n    });\n  });\n}\n\n/**\n * @public\n */\nclass Airdrop721 {\n  featureName = FEATURE_AIRDROP_ERC721.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Perform airdrop of ERC721 tokens\n   *\n   * @example\n   * ```javascript\n   * // Airdrop content array, with recipients and tokenIds\n   * const contents = [\n   *      {\n   *        recipient: \"0xabc...\", // first recipient address\n   *        tokenId: 0\n   *      },\n   *      {\n   *        recipient: \"0x123...\", // second recipient address\n   *        tokenId: 2\n   *      }\n   *   ]\n   *\n   * const tokenAddress = \"0x...\" // Address of the ERC721 token being airdropped\n   * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n   *\n   * const output = await contract.airdrop721.drop(tokenAddress, tokenOwner, contents);\n   *\n   * // the `output` return value above contains:\n   * //     - count of successful and failed drops\n   * //     - array containing failed drops, if any\n   *\n   * ```\n   * @param tokenAddress - Address of the ERC721 token being airdropped\n   * @param tokenOwner - Address of the owner of the tokens being airdropped\n   * @param contents - Array of recipients and tokenIds to airdrop\n   *\n   * @returns an array of recipients for who the airdrop failed (empty means all transfers were successful)\n   * @twfeature AirdropERC721\n   */\n  drop = /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"airdropERC721\",\n      args: [tokenAddress, tokenOwner, contents],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n        const failedDrops = events.map(e => {\n          return {\n            recipient: e.args.recipient,\n            tokenId: e.args.tokenId.toNumber()\n          };\n        });\n        return {\n          successfulDropCount: contents.length - failedDrops.length,\n          failedDropCount: failedDrops.length,\n          failedDrops\n        };\n      }\n    });\n  });\n}\n\nclass ExtensionManager {\n  featureName = FEATURE_DYNAMIC_CONTRACT.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  async getAll() {\n    const extensions = await this.contractWrapper.readContract.getAllExtensions();\n    return extensions;\n  }\n  async get(extensionName) {\n    const extension = await this.contractWrapper.readContract.getExtension(extensionName);\n    return extension;\n  }\n  async getExtensionAddress(extensionName) {\n    const extension = await this.get(extensionName);\n    return extension.metadata.implementation;\n  }\n  async getAllFunctions(extensionName) {\n    const extension = await this.get(extensionName);\n    return extension.functions;\n  }\n  async getExtensionForFunction(functionInput) {\n    let selector = functionInput.functionSelector;\n    if (!selector) {\n      invariant(functionInput.functionSignature, \"Atleast one of function selector and signature must be provided\");\n      selector = utils.id(functionInput.functionSignature).substring(0, 10);\n    }\n    const extensionMetadata = await this.contractWrapper.readContract.getMetadataForFunction(selector);\n    return extensionMetadata;\n  }\n  async getExtensionAddressForFunction(functionInput) {\n    const extensionMetadata = await this.getExtensionForFunction(functionInput);\n    return extensionMetadata.implementation;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Adds an extension to the contract\n   */\n  add = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"addExtension\",\n      args: [inputArgs.extension],\n      parse: async receipt => {\n        const events = this.contractWrapper.parseLogs(\"ExtensionAdded\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ExtensionAdded event found\");\n        }\n        const extensionAbi = inputArgs.extensionAbi ? AbiSchema.parse(inputArgs.extensionAbi) : (await fetchContractMetadataFromAddress(inputArgs.extension.metadata.implementation, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n        const abiToAdd = this.filterAbiForAdd(extensionAbi, inputArgs.extension);\n        const updatedAbi = joinABIs([AbiSchema.parse(this.contractWrapper.abi), abiToAdd]);\n        this.contractWrapper.updateAbi(updatedAbi);\n        return receipt;\n      }\n    });\n  });\n\n  /**\n   * Adds a deployed extension to the contract\n   */\n  addDeployed = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    let extensionAbi = inputArgs.extensionAbi;\n    if (!extensionAbi) {\n      const metadata = await fetchContractMetadataFromAddress(inputArgs.extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage, this.contractWrapper.options);\n      extensionAbi = metadata.abi;\n    }\n    invariant(extensionAbi, \"Require extension ABI\");\n    let extensionMetadataUri = \"\";\n    if (inputArgs.extensionMetadata) {\n      if (typeof inputArgs.extensionMetadata === \"string\") {\n        extensionMetadataUri = inputArgs.extensionMetadata;\n      } else {\n        const parsedMetadata = await CommonContractSchema.parseAsync(inputArgs.extensionMetadata);\n        extensionMetadataUri = await this.contractWrapper.storage.upload(parsedMetadata);\n      }\n    }\n    const extensionFunctions = generateExtensionFunctions(AbiSchema.parse(extensionAbi));\n    const extension = {\n      metadata: {\n        name: inputArgs.extensionName,\n        metadataURI: extensionMetadataUri,\n        implementation: inputArgs.extensionAddress\n      },\n      functions: extensionFunctions\n    };\n    return this.add.prepare({\n      extension,\n      extensionAbi\n    });\n  });\n\n  /**\n   * Adds a published extension to the contract, and deploys it deterministically if necessary\n   */\n  addPublished = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    const version = inputArgs.version || \"latest\";\n    const {\n      deployedExtensionAddress,\n      extensionMetadata\n    } = await this.deployExtension(inputArgs.extensionName, inputArgs.publisherAddress || THIRDWEB_DEPLOYER, version);\n    return this.addDeployed.prepare({\n      extensionName: inputArgs.extensionName,\n      extensionAddress: deployedExtensionAddress,\n      extensionMetadata: inputArgs.extensionMetadataOverride || extensionMetadata\n    });\n  });\n  replace = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"replaceExtension\",\n      args: [inputArgs.extension],\n      parse: async receipt => {\n        const events = this.contractWrapper.parseLogs(\"ExtensionReplaced\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ExtensionReplaced event found\");\n        }\n        const extensionAbi = inputArgs.extensionAbi ? AbiSchema.parse(inputArgs.extensionAbi) : (await fetchContractMetadataFromAddress(inputArgs.extension.metadata.implementation, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n        const contractAbi = this.filterAbiForRemove(AbiSchema.parse(this.contractWrapper.abi), extensionAbi);\n        const abiToAdd = this.filterAbiForAdd(extensionAbi, inputArgs.extension);\n        const updatedAbi = joinABIs([contractAbi, abiToAdd]);\n        this.contractWrapper.updateAbi(updatedAbi);\n        return receipt;\n      }\n    });\n  });\n  replaceDeployed = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    let extensionAbi = inputArgs.extensionAbi;\n    if (!extensionAbi) {\n      const metadata = await fetchContractMetadataFromAddress(inputArgs.extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage, this.contractWrapper.options);\n      extensionAbi = metadata.abi;\n    }\n    invariant(extensionAbi, \"Require extension ABI\");\n    let extensionMetadataUri = \"\";\n    if (inputArgs.extensionMetadata) {\n      if (typeof inputArgs.extensionMetadata === \"string\") {\n        extensionMetadataUri = inputArgs.extensionMetadata;\n      } else {\n        const parsedMetadata = await CommonContractSchema.parseAsync(inputArgs.extensionMetadata);\n        extensionMetadataUri = await this.contractWrapper.storage.upload(parsedMetadata);\n      }\n    }\n    const extensionFunctions = generateExtensionFunctions(AbiSchema.parse(extensionAbi));\n    const extension = {\n      metadata: {\n        name: inputArgs.extensionName,\n        metadataURI: extensionMetadataUri,\n        implementation: inputArgs.extensionAddress\n      },\n      functions: extensionFunctions\n    };\n    return this.replace.prepare({\n      extension,\n      extensionAbi\n    });\n  });\n  replacePublished = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    const version = inputArgs.version || \"latest\";\n    const {\n      deployedExtensionAddress,\n      extensionMetadata\n    } = await this.deployExtension(inputArgs.extensionName, inputArgs.publisherAddress || THIRDWEB_DEPLOYER, version);\n    return this.replaceDeployed.prepare({\n      extensionName: inputArgs.extensionName,\n      extensionAddress: deployedExtensionAddress,\n      extensionMetadata: inputArgs.extensionMetadataOverride || extensionMetadata\n    });\n  });\n  remove = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    const extensionAddress = await this.getExtensionAddress(inputArgs.extensionName);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"removeExtension\",\n      args: [inputArgs.extensionName],\n      parse: async receipt => {\n        const events = this.contractWrapper.parseLogs(\"ExtensionRemoved\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ExtensionRemoved event found\");\n        }\n        const extensionAbi = (await fetchContractMetadataFromAddress(extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n        const updatedAbi = this.filterAbiForRemove(AbiSchema.parse(this.contractWrapper.abi), extensionAbi);\n        this.contractWrapper.updateAbi(updatedAbi);\n        return receipt;\n      }\n    });\n  });\n\n  /** ******************************\n   * Internal / private\n   *******************************/\n\n  filterAbiForAdd(extensionAbi, extension) {\n    const extensionAbiInterface = new utils.Interface(extensionAbi);\n    const extensionFunctionSelectors = extension.functions.map(fn => fn.functionSelector);\n    const filtered = extensionAbi.filter(item => {\n      const fnFragment = Object.values(new utils.Interface([item]).functions);\n      if (fnFragment.length === 0) {\n        return false;\n      }\n      const fnSigHash = extensionAbiInterface.getSighash(fnFragment[0]);\n      return extensionFunctionSelectors.includes(fnSigHash);\n    });\n    return filtered;\n  }\n  filterAbiForRemove(fullAbi, abiToRemove) {\n    const fullAbiInterface = new utils.Interface(fullAbi);\n    const interfaceToRemove = new utils.Interface(abiToRemove);\n    const functionsToRemove = Object.values(interfaceToRemove.functions).map(fn => interfaceToRemove.getSighash(fn));\n    const filtered = fullAbi.filter(item => {\n      const fnFragment = Object.values(new utils.Interface([item]).functions);\n      if (fnFragment.length === 0) {\n        return false;\n      }\n      const fnSigHash = fullAbiInterface.getSighash(fnFragment[0]);\n      return !functionsToRemove.includes(fnSigHash);\n    });\n    return filtered;\n  }\n  async deployExtension(extensionName, publisherAddress) {\n    let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n    const published = await fetchPublishedContractFromPolygon(publisherAddress, extensionName, version, this.contractWrapper.storage, this.contractWrapper.options.clientId, this.contractWrapper.options.secretKey);\n    const deploymentInfo = await getDeploymentInfo(published.metadataUri, this.contractWrapper.storage, this.contractWrapper.getProvider(), \"\", this.contractWrapper.options.clientId, this.contractWrapper.options.secretKey);\n    const implementationAddress = deploymentInfo.find(i => i.type === \"implementation\")?.transaction.predictedAddress;\n\n    // deploy infra + plugins + implementation using a throwaway Deployer contract\n\n    // filter out already deployed contracts (data is empty)\n    const transactionsToSend = deploymentInfo.filter(i => i.transaction.data && i.transaction.data.length > 0);\n    const transactionsforDirectDeploy = transactionsToSend.filter(i => {\n      return i.type !== \"infra\";\n    }).map(i => i.transaction);\n    const transactionsForThrowawayDeployer = transactionsToSend.filter(i => {\n      return i.type === \"infra\";\n    }).map(i => i.transaction);\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"Signer is required\");\n\n    // deploy via throwaway deployer, multiple infra contracts in one transaction\n    await deployWithThrowawayDeployer(signer, transactionsForThrowawayDeployer, {});\n\n    // send each transaction directly to Create2 factory\n    // process txns one at a time\n    for (const tx of transactionsforDirectDeploy) {\n      try {\n        await deployContractDeterministic(signer, tx);\n      } catch (e) {\n        console.debug(`Error deploying contract at ${tx.predictedAddress}`, e?.message);\n      }\n    }\n    return {\n      deployedExtensionAddress: implementationAddress,\n      extensionMetadata: published.metadataUri\n    };\n  }\n}\n\n/**\n * Custom contract dynamic class with feature detection\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(provider);\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n *\n * // call any function in your contract\n * await contract.call(\"myCustomFunction\", [param1, param2]);\n *\n * // if your contract follows the ERC721 standard, contract.nft will be present\n * const allNFTs = await contract.erc721.query.all()\n *\n * // if your contract extends IMintableERC721, contract.nft.mint() will be available\n * const tx = await contract.erc721.mint({\n *     name: \"Cool NFT\",\n *     image: readFileSync(\"some_image.png\"),\n *   });\n * ```\n *\n * @beta\n */\nclass SmartContract {\n  // utilities\n\n  get abi() {\n    return AbiSchema.parse(this.contractWrapper.abi || []);\n  }\n\n  /**\n   * Handle royalties\n   */\n  get royalties() {\n    return assertEnabled(this.detectRoyalties(), FEATURE_ROYALTY);\n  }\n\n  /**\n   * Handle permissions\n   */\n  get roles() {\n    return assertEnabled(this.detectRoles(), FEATURE_PERMISSIONS);\n  }\n\n  /**\n   * Handle primary sales\n   */\n  get sales() {\n    return assertEnabled(this.detectPrimarySales(), FEATURE_PRIMARY_SALE);\n  }\n\n  /**\n   * Handle platform fees\n   */\n  get platformFees() {\n    return assertEnabled(this.detectPlatformFees(), FEATURE_PLATFORM_FEE);\n  }\n\n  /**\n   * Set and get the owner of the contract\n   */\n  get owner() {\n    return assertEnabled(this.detectOwnable(), FEATURE_OWNER);\n  }\n\n  /**\n   * Auto-detects ERC20 standard functions.\n   */\n  get erc20() {\n    return assertEnabled(this.detectErc20(), FEATURE_TOKEN);\n  }\n\n  /**\n   * Auto-detects ERC721 standard functions.\n   */\n  get erc721() {\n    return assertEnabled(this.detectErc721(), FEATURE_NFT);\n  }\n\n  /**\n   * Auto-detects ERC1155 standard functions.\n   */\n  get erc1155() {\n    return assertEnabled(this.detectErc1155(), FEATURE_EDITION);\n  }\n\n  /**\n   * Auto-detects AppURI standard functions.\n   */\n  get app() {\n    return assertEnabled(this.detectApp(), FEATURE_APPURI);\n  }\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get airdrop20() {\n    return assertEnabled(this.detectAirdrop20(), FEATURE_AIRDROP_ERC20);\n  }\n  get airdrop721() {\n    return assertEnabled(this.detectAirdrop721(), FEATURE_AIRDROP_ERC721);\n  }\n  get airdrop1155() {\n    return assertEnabled(this.detectAirdrop1155(), FEATURE_AIRDROP_ERC1155);\n  }\n\n  /**\n   * Account Factory\n   *\n   * @remarks Create accounts and fetch data about them.\n   * @example\n   * ```javascript\n   *\n   * // Predict the address of the account that will be created for an admin.\n   * const deterministicAddress = await contract.accountFactory.predictAccountAddress(admin, extraData);\n   *\n   * // Create accounts\n   * const tx = await contract.accountFactory.createAccount(admin, extraData);\n   * // the same as `deterministicAddress`\n   * const accountAddress = tx.address;\n   *\n   * // Get all accounts created by the factory\n   * const allAccounts = await contract.accountFactory.getAllAccounts();\n   *\n   * // Get all accounts on which a signer has been given authority.\n   * const associatedAccounts = await contract.accountFactory.getAssociatedAccounts(signer);\n   *\n   * // Get all signers who have been given authority on a account.\n   * const associatedSigners = await contract.accountFactory.getAssociatedSigners(accountAddress);\n   *\n   * // Check whether a account has already been created for a given admin.\n   * const isAccountDeployed = await contract.accountFactory.isAccountDeployed(admin, extraData);\n   * ```\n   */\n  get accountFactory() {\n    return assertEnabled(this.detectAccountFactory(), FEATURE_ACCOUNT_FACTORY);\n  }\n\n  // TODO documentation\n  get account() {\n    return assertEnabled(this.detectAccount(), FEATURE_ACCOUNT);\n  }\n  get extensions() {\n    return assertEnabled(this.detectBaseRouter(), FEATURE_DYNAMIC_CONTRACT);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, abi, storage) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.publishedMetadata = new ContractPublishedMetadata(this.contractWrapper, this.storage);\n    this.metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Prepare a transaction for sending\n   */\n  prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * Call any function on this contract\n   * @example\n   * ```javascript\n   * // read functions will return the data from the contract\n   * const myValue = await contract.call(\"myReadFunction\");\n   * console.log(myValue);\n   *\n   * // write functions will return the transaction receipt\n   * const tx = await contract.call(\"myWriteFunction\", [arg1, arg2]);\n   * const receipt = tx.receipt;\n   *\n   * // Optionally override transaction options\n   * await contract.call(\"myWriteFunction\", [arg1, arg2], {\n   *  gasLimit: 1000000, // override default gas limit\n   *  value: ethers.utils.parseEther(\"0.1\"), // send 0.1 ether with the contract call\n   * };\n   * ```\n   * @param functionName - the name of the function to call\n   * @param args - the arguments of the function\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectRoyalties() {\n    if (detectContractFeature(this.contractWrapper, \"Royalty\")) {\n      // ContractMetadata is stateless, it's fine to create a new one here\n      // This also makes it not order dependent in the feature detection process\n      const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n      return new ContractRoyalty(this.contractWrapper, metadata);\n    }\n    return undefined;\n  }\n  detectRoles() {\n    if (detectContractFeature(this.contractWrapper, \"Permissions\")) {\n      return new ContractRoles(this.contractWrapper, ALL_ROLES);\n    }\n    return undefined;\n  }\n  detectPrimarySales() {\n    if (detectContractFeature(this.contractWrapper, \"PrimarySale\")) {\n      return new ContractPrimarySale(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectPlatformFees() {\n    if (detectContractFeature(this.contractWrapper, \"PlatformFee\")) {\n      return new ContractPlatformFee(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return new Erc20(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc721() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721\")) {\n      return new Erc721(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc1155() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155\")) {\n      return new Erc1155(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectOwnable() {\n    if (detectContractFeature(this.contractWrapper, \"Ownable\")) {\n      return new ContractOwner(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectApp() {\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return new ContractAppURI(this.contractWrapper, metadata, this.storage);\n    } else if (detectContractFeature(this.contractWrapper, \"ContractMetadata\")) {\n      return new ContractAppURI(this.contractWrapper, metadata, this.storage);\n    }\n    return undefined;\n  }\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectBaseRouter() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_DYNAMIC_CONTRACT.name)) {\n      return new ExtensionManager(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop20() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC20\")) {\n      return new Airdrop20(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop721() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC721\")) {\n      return new Airdrop721(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop1155() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC1155\")) {\n      return new Airdrop1155(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  // ========== Account features ==========\n\n  detectAccountFactory() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT_FACTORY.name)) {\n      return new AccountFactory(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAccount() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT.name)) {\n      return new Account(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\nexport { SmartContract };\n"],"names":["ContractPrimarySale","constructor","contractWrapper","_defineProperty","FEATURE_PRIMARY_SALE","name","buildTransactionFunction","async","Transaction","fromContractWrapper","this","method","args","recipient","getRecipient","read","ContractPublishedMetadata","storage","get","_cachedMetadata","fetchContractMetadataFromAddress","address","getProvider","options","extractSources","publishedMetadata","fetchSourceFilesFromMetadata","extractFunctions","_publishedMetadata","e","extractFunctionsFromAbi","AbiSchema","parse","abi","metadata","extractEvents","_publishedMetadata2","events","filter","el","type","parsed","doc","extractCommentFromMetadata","push","inputs","outputs","comment","extractEventsFromAbi","AdminFlag","DEFAULT_PERMISSIONS","startDate","BigNumber","from","expirationDate","approvedCallTargets","nativeTokenLimitPerTransaction","SignerPermissionsSchema","z","object","StartDateSchema","EndDateSchema","AmountSchema","default","union","array","AddressOrEnsSchema","literal","PermissionSnapshotSchema","signer","makeAdmin","boolean","permissions","SignerPermissionRequestV1","SignerPermissionRequest","AccountPermissions","FEATURE_ACCOUNT_PERMISSIONS","resolvedSignerAddress","resolveAddress","signerAddress","sendSignerPermissionRequest","AddAdmin","RemoveAdmin","resolvedPermissions","parseAsync","isAdmin","Error","isSigner","None","target","resolvedTarget","approvedTargets","includes","newTargets","startTimestamp","endTimestamp","toString","approvedTarget","utils","resolvedSnapshot","permissionSnapshot","hasDuplicateSigners","removeAdminData","addOrUpdateSignerData","removeSignerData","allAdmins","getAllAdmins","allToMakeAdmin","item","map","forEach","admin","data","encode","allSigners","getAllSigners","allToMakeSigners","Promise","all","member","getAddress","snapshot","checkedSigner","signers","parseSignerPermissionsStruct","Date","parseInt","adminFlag","detectContractFeature","payload","signature","generateLegacyPayload","generatePayload","valueOf","AddressZero","permissionStartTimestamp","permissionEndTimestamp","reqValidityStartTimestamp","reqValidityEndTimestamp","Math","floor","now","getTime","uid","resolveOrGenerateId","undefined","chainId","getChainID","connectedSigner","getSigner","invariant","signTypedData","version","verifyingContract","activeSignersWithPerms","signerWithPermissions","getAllAdminsAndSigners","Account","FEATURE_ACCOUNT","assertEnabled","accountPermissions","grantAdminPermissions","prepare","revokeAdminPermissions","grantPermissions","updatePermissions","revokeAccess","approveTargetForSigner","disapproveTargetForSigner","resetAllPermissions","detectAccountPermissions","AccountFactory","FEATURE_ACCOUNT_FACTORY","accountAdmin","extraData","isAccountDeployed","concat","receipt","parseLogs","logs","account","ContractEvents","predictAccountAddress","getAssociatedAccounts","getAllAccounts","addr","isContractDeployed","Airdrop1155","FEATURE_AIRDROP_ERC1155","tokenAddress","tokenOwner","contents","failedDrops","tokenId","toNumber","amount","successfulDropCount","length","failedDropCount","Airdrop20","FEATURE_AIRDROP_ERC20","Airdrop721","FEATURE_AIRDROP_ERC721","ExtensionManager","FEATURE_DYNAMIC_CONTRACT","inputArgs","extension","extensionAbi","implementation","abiToAdd","filterAbiForAdd","updatedAbi","joinABIs","updateAbi","extensionAddress","extensionMetadataUri","extensionMetadata","parsedMetadata","CommonContractSchema","upload","extensionFunctions","generateExtensionFunctions","extensionName","metadataURI","functions","add","deployedExtensionAddress","deployExtension","publisherAddress","THIRDWEB_DEPLOYER","addDeployed","extensionMetadataOverride","contractAbi","filterAbiForRemove","replace","replaceDeployed","getExtensionAddress","readContract","getAll","getAllExtensions","getExtension","getAllFunctions","getExtensionForFunction","functionInput","selector","functionSelector","functionSignature","substring","getMetadataForFunction","getExtensionAddressForFunction","extensionAbiInterface","extensionFunctionSelectors","fn","fnFragment","Object","values","fnSigHash","getSighash","fullAbi","abiToRemove","fullAbiInterface","interfaceToRemove","functionsToRemove","_deploymentInfo$find","arguments","published","fetchPublishedContractFromPolygon","clientId","secretKey","deploymentInfo","getDeploymentInfo","metadataUri","implementationAddress","find","i","transaction","predictedAddress","transactionsToSend","transactionsforDirectDeploy","transactionsForThrowawayDeployer","deployWithThrowawayDeployer","tx","deployContractDeterministic","console","debug","message","SmartContract","royalties","detectRoyalties","FEATURE_ROYALTY","roles","detectRoles","FEATURE_PERMISSIONS","sales","detectPrimarySales","platformFees","detectPlatformFees","FEATURE_PLATFORM_FEE","owner","detectOwnable","FEATURE_OWNER","erc20","detectErc20","FEATURE_TOKEN","erc721","detectErc721","FEATURE_NFT","erc1155","detectErc1155","FEATURE_EDITION","app","detectApp","FEATURE_APPURI","directListings","detectDirectListings","FEATURE_DIRECT_LISTINGS","englishAuctions","detectEnglishAuctions","FEATURE_ENGLISH_AUCTIONS","offers","detectOffers","FEATURE_OFFERS","airdrop20","detectAirdrop20","airdrop721","detectAirdrop721","airdrop1155","detectAirdrop1155","accountFactory","detectAccountFactory","detectAccount","extensions","detectBaseRouter","_chainId","network","ContractWrapper","encoder","ContractEncoder","interceptor","ContractInterceptor","estimator","GasCostEstimator","ContractMetadata","CustomContractSchema","onNetworkUpdated","updateSignerOrProvider","overrides","call","functionName","ContractRoyalty","ContractRoles","ALL_ROLES","ContractPlatformFee","Erc20","Erc721","Erc1155","ContractOwner","ContractAppURI","MarketplaceV3DirectListings","MarketplaceV3EnglishAuctions","MarketplaceV3Offers"],"sourceRoot":""}